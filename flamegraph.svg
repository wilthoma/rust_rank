<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="293.00"> </text><svg id="frames" x="10" width="1180" total_samples="5882"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.02%)</title><rect x="0.0000%" y="229" width="0.0170%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.02%)</title><rect x="0.0000%" y="213" width="0.0170%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (29 samples, 0.49%)</title><rect x="0.0170%" y="149" width="0.4930%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="29"/><text x="0.2670%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.12%)</title><rect x="0.5100%" y="149" width="0.1190%" height="15" fill="rgb(248,212,6)" fg:x="30" fg:w="7"/><text x="0.7600%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.03%)</title><rect x="0.6290%" y="149" width="0.0340%" height="15" fill="rgb(208,68,35)" fg:x="37" fg:w="2"/><text x="0.8790%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.03%)</title><rect x="0.6290%" y="133" width="0.0340%" height="15" fill="rgb(232,128,0)" fg:x="37" fg:w="2"/><text x="0.8790%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="0.6630%" y="149" width="0.0170%" height="15" fill="rgb(207,160,47)" fg:x="39" fg:w="1"/><text x="0.9130%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (28 samples, 0.48%)</title><rect x="0.6800%" y="149" width="0.4760%" height="15" fill="rgb(228,23,34)" fg:x="40" fg:w="28"/><text x="0.9300%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (28 samples, 0.48%)</title><rect x="0.6800%" y="133" width="0.4760%" height="15" fill="rgb(218,30,26)" fg:x="40" fg:w="28"/><text x="0.9300%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="1.1561%" y="149" width="0.0170%" height="15" fill="rgb(220,122,19)" fg:x="68" fg:w="1"/><text x="1.4061%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="1.1731%" y="149" width="0.0170%" height="15" fill="rgb(250,228,42)" fg:x="69" fg:w="1"/><text x="1.4231%" y="159.50"></text></g><g><title>rust_rank`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (246 samples, 4.18%)</title><rect x="1.2581%" y="133" width="4.1823%" height="15" fill="rgb(240,193,28)" fg:x="74" fg:w="246"/><text x="1.5081%" y="143.50">rust_..</text></g><g><title>rust_rank`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.03%)</title><rect x="5.4403%" y="101" width="0.0340%" height="15" fill="rgb(216,20,37)" fg:x="320" fg:w="2"/><text x="5.6903%" y="111.50"></text></g><g><title>rust_rank`rust_rank::matrices::create_random_vector (3 samples, 0.05%)</title><rect x="5.4403%" y="133" width="0.0510%" height="15" fill="rgb(206,188,39)" fg:x="320" fg:w="3"/><text x="5.6903%" y="143.50"></text></g><g><title>rust_rank`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.05%)</title><rect x="5.4403%" y="117" width="0.0510%" height="15" fill="rgb(217,207,13)" fg:x="320" fg:w="3"/><text x="5.6903%" y="127.50"></text></g><g><title>rust_rank`rand::rng::Rng::random_range (1 samples, 0.02%)</title><rect x="5.4743%" y="101" width="0.0170%" height="15" fill="rgb(231,73,38)" fg:x="322" fg:w="1"/><text x="5.7243%" y="111.50"></text></g><g><title>rust_rank`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5,080 samples, 86.37%)</title><rect x="1.1901%" y="149" width="86.3652%" height="15" fill="rgb(225,20,46)" fg:x="70" fg:w="5080"/><text x="1.4401%" y="159.50">rust_rank`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>rust_rank`rust_rank::matrices::serial_sparse_matvec_mul_chunk2 (4,827 samples, 82.06%)</title><rect x="5.4913%" y="133" width="82.0639%" height="15" fill="rgb(210,31,41)" fg:x="323" fg:w="4827"/><text x="5.7413%" y="143.50">rust_rank`rust_rank::matrices::serial_sparse_matvec_mul_chunk2</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (61 samples, 1.04%)</title><rect x="86.5182%" y="117" width="1.0371%" height="15" fill="rgb(221,200,47)" fg:x="5089" fg:w="61"/><text x="86.7682%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (61 samples, 1.04%)</title><rect x="86.5182%" y="101" width="1.0371%" height="15" fill="rgb(226,26,5)" fg:x="5089" fg:w="61"/><text x="86.7682%" y="111.50"></text></g><g><title>rust_rank`DYLD-STUB$$free (5 samples, 0.09%)</title><rect x="87.5553%" y="149" width="0.0850%" height="15" fill="rgb(249,33,26)" fg:x="5150" fg:w="5"/><text x="87.8053%" y="159.50"></text></g><g><title>rust_rank`core::str::_&lt;impl str&gt;::trim_matches (18 samples, 0.31%)</title><rect x="87.6403%" y="149" width="0.3060%" height="15" fill="rgb(235,183,28)" fg:x="5155" fg:w="18"/><text x="87.8903%" y="159.50"></text></g><g><title>rust_rank`rayon_core::registry::set_global_registry (1 samples, 0.02%)</title><rect x="87.9463%" y="149" width="0.0170%" height="15" fill="rgb(221,5,38)" fg:x="5173" fg:w="1"/><text x="88.1963%" y="159.50"></text></g><g><title>rust_rank`std::sys::sync::once::queue::Once::call (1 samples, 0.02%)</title><rect x="87.9463%" y="133" width="0.0170%" height="15" fill="rgb(247,18,42)" fg:x="5173" fg:w="1"/><text x="88.1963%" y="143.50"></text></g><g><title>rust_rank`std::sync::poison::once::Once::call_once::_{{closure}} (1 samples, 0.02%)</title><rect x="87.9463%" y="117" width="0.0170%" height="15" fill="rgb(241,131,45)" fg:x="5173" fg:w="1"/><text x="88.1963%" y="127.50"></text></g><g><title>rust_rank`&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn (1 samples, 0.02%)</title><rect x="87.9463%" y="101" width="0.0170%" height="15" fill="rgb(249,31,29)" fg:x="5173" fg:w="1"/><text x="88.1963%" y="111.50"></text></g><g><title>rust_rank`std::thread::Builder::spawn_unchecked (1 samples, 0.02%)</title><rect x="87.9463%" y="85" width="0.0170%" height="15" fill="rgb(225,111,53)" fg:x="5173" fg:w="1"/><text x="88.1963%" y="95.50"></text></g><g><title>rust_rank`std::sys::pal::unix::thread::Thread::new (1 samples, 0.02%)</title><rect x="87.9463%" y="69" width="0.0170%" height="15" fill="rgb(238,160,17)" fg:x="5173" fg:w="1"/><text x="88.1963%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_create (1 samples, 0.02%)</title><rect x="87.9463%" y="53" width="0.0170%" height="15" fill="rgb(214,148,48)" fg:x="5173" fg:w="1"/><text x="88.1963%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.02%)</title><rect x="87.9463%" y="37" width="0.0170%" height="15" fill="rgb(232,36,49)" fg:x="5173" fg:w="1"/><text x="88.1963%" y="47.50"></text></g><g><title>rust_rank`rust_rank::matrices::CsrMatrix::scale_csr_matrix_columns (8 samples, 0.14%)</title><rect x="87.9633%" y="149" width="0.1360%" height="15" fill="rgb(209,103,24)" fg:x="5174" fg:w="8"/><text x="88.2133%" y="159.50"></text></g><g><title>rust_rank`rust_rank::matrices::CsrMatrix::scale_csr_matrix_rows (18 samples, 0.31%)</title><rect x="88.0993%" y="149" width="0.3060%" height="15" fill="rgb(229,88,8)" fg:x="5182" fg:w="18"/><text x="88.3493%" y="159.50"></text></g><g><title>rust_rank`rust_rank::matrices::CsrMatrix::transpose (69 samples, 1.17%)</title><rect x="88.4053%" y="149" width="1.1731%" height="15" fill="rgb(213,181,19)" fg:x="5200" fg:w="69"/><text x="88.6553%" y="159.50"></text></g><g><title>rust_rank`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (7 samples, 0.12%)</title><rect x="89.5784%" y="117" width="0.1190%" height="15" fill="rgb(254,191,54)" fg:x="5269" fg:w="7"/><text x="89.8284%" y="127.50"></text></g><g><title>rust_rank`rust_rank::matrices::create_random_vector_nozero (8 samples, 0.14%)</title><rect x="89.5784%" y="149" width="0.1360%" height="15" fill="rgb(241,83,37)" fg:x="5269" fg:w="8"/><text x="89.8284%" y="159.50"></text></g><g><title>rust_rank`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.14%)</title><rect x="89.5784%" y="133" width="0.1360%" height="15" fill="rgb(233,36,39)" fg:x="5269" fg:w="8"/><text x="89.8284%" y="143.50"></text></g><g><title>rust_rank`rand::rng::Rng::random_range (1 samples, 0.02%)</title><rect x="89.6974%" y="117" width="0.0170%" height="15" fill="rgb(226,3,54)" fg:x="5276" fg:w="1"/><text x="89.9474%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (6 samples, 0.10%)</title><rect x="90.8194%" y="133" width="0.1020%" height="15" fill="rgb(245,192,40)" fg:x="5342" fg:w="6"/><text x="91.0694%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.24%)</title><rect x="90.9215%" y="133" width="0.2380%" height="15" fill="rgb(238,167,29)" fg:x="5348" fg:w="14"/><text x="91.1715%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (81 samples, 1.38%)</title><rect x="91.1595%" y="133" width="1.3771%" height="15" fill="rgb(232,182,51)" fg:x="5362" fg:w="81"/><text x="91.4095%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.24%)</title><rect x="92.5366%" y="133" width="0.2380%" height="15" fill="rgb(231,60,39)" fg:x="5443" fg:w="14"/><text x="92.7866%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.22%)</title><rect x="92.7746%" y="133" width="0.2210%" height="15" fill="rgb(208,69,12)" fg:x="5457" fg:w="13"/><text x="93.0246%" y="143.50"></text></g><g><title>rust_rank`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 0.27%)</title><rect x="92.9956%" y="133" width="0.2720%" height="15" fill="rgb(235,93,37)" fg:x="5470" fg:w="16"/><text x="93.2456%" y="143.50"></text></g><g><title>rust_rank`&lt;core::str::iter::SplitWhitespace as core::iter::traits::iterator::Iterator&gt;::next (95 samples, 1.62%)</title><rect x="93.2676%" y="133" width="1.6151%" height="15" fill="rgb(213,116,39)" fg:x="5486" fg:w="95"/><text x="93.5176%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.17%)</title><rect x="95.0867%" y="117" width="0.1700%" height="15" fill="rgb(222,207,29)" fg:x="5593" fg:w="10"/><text x="95.3367%" y="127.50"></text></g><g><title>rust_rank`DYLD-STUB$$memcpy (2 samples, 0.03%)</title><rect x="95.2567%" y="117" width="0.0340%" height="15" fill="rgb(206,96,30)" fg:x="5603" fg:w="2"/><text x="95.5067%" y="127.50"></text></g><g><title>rust_rank`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (5 samples, 0.09%)</title><rect x="95.2907%" y="117" width="0.0850%" height="15" fill="rgb(218,138,4)" fg:x="5605" fg:w="5"/><text x="95.5407%" y="127.50"></text></g><g><title>rust_rank`core::str::converts::from_utf8 (5 samples, 0.09%)</title><rect x="95.3757%" y="117" width="0.0850%" height="15" fill="rgb(250,191,14)" fg:x="5610" fg:w="5"/><text x="95.6257%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (32 samples, 0.54%)</title><rect x="95.6987%" y="101" width="0.5440%" height="15" fill="rgb(239,60,40)" fg:x="5629" fg:w="32"/><text x="95.9487%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.14%)</title><rect x="96.3788%" y="85" width="0.1360%" height="15" fill="rgb(206,27,48)" fg:x="5669" fg:w="8"/><text x="96.6288%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.27%)</title><rect x="96.5148%" y="85" width="0.2720%" height="15" fill="rgb(225,35,8)" fg:x="5677" fg:w="16"/><text x="96.7648%" y="95.50"></text></g><g><title>rust_rank`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="96.7868%" y="85" width="0.0170%" height="15" fill="rgb(250,213,24)" fg:x="5693" fg:w="1"/><text x="97.0368%" y="95.50"></text></g><g><title>rust_rank`__rdl_alloc (3 samples, 0.05%)</title><rect x="96.8038%" y="85" width="0.0510%" height="15" fill="rgb(247,123,22)" fg:x="5694" fg:w="3"/><text x="97.0538%" y="95.50"></text></g><g><title>rust_rank`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (38 samples, 0.65%)</title><rect x="96.2428%" y="101" width="0.6460%" height="15" fill="rgb(231,138,38)" fg:x="5661" fg:w="38"/><text x="96.4928%" y="111.50"></text></g><g><title>rust_rank`alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="96.8548%" y="85" width="0.0340%" height="15" fill="rgb(231,145,46)" fg:x="5697" fg:w="2"/><text x="97.1048%" y="95.50"></text></g><g><title>rust_rank`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="96.8888%" y="101" width="0.0170%" height="15" fill="rgb(251,118,11)" fg:x="5699" fg:w="1"/><text x="97.1388%" y="111.50"></text></g><g><title>rust_rank`core::slice::memchr::memchr_aligned (103 samples, 1.75%)</title><rect x="96.9058%" y="101" width="1.7511%" height="15" fill="rgb(217,147,25)" fg:x="5700" fg:w="103"/><text x="97.1558%" y="111.50"></text></g><g><title>rust_rank`&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (243 samples, 4.13%)</title><rect x="94.8827%" y="133" width="4.1312%" height="15" fill="rgb(247,81,37)" fg:x="5581" fg:w="243"/><text x="95.1327%" y="143.50">rust_..</text></g><g><title>rust_rank`std::io::append_to_string (209 samples, 3.55%)</title><rect x="95.4607%" y="117" width="3.5532%" height="15" fill="rgb(209,12,38)" fg:x="5615" fg:w="209"/><text x="95.7107%" y="127.50">rust..</text></g><g><title>rust_rank`core::str::converts::from_utf8 (21 samples, 0.36%)</title><rect x="98.6569%" y="101" width="0.3570%" height="15" fill="rgb(227,1,9)" fg:x="5803" fg:w="21"/><text x="98.9069%" y="111.50"></text></g><g><title>rust_rank`DYLD-STUB$$malloc (2 samples, 0.03%)</title><rect x="99.0139%" y="133" width="0.0340%" height="15" fill="rgb(248,47,43)" fg:x="5824" fg:w="2"/><text x="99.2639%" y="143.50"></text></g><g><title>rust_rank`__rdl_alloc (2 samples, 0.03%)</title><rect x="99.0479%" y="133" width="0.0340%" height="15" fill="rgb(221,10,30)" fg:x="5826" fg:w="2"/><text x="99.2979%" y="143.50"></text></g><g><title>rust_rank`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.03%)</title><rect x="99.0819%" y="133" width="0.0340%" height="15" fill="rgb(210,229,1)" fg:x="5828" fg:w="2"/><text x="99.3319%" y="143.50"></text></g><g><title>rust_rank`alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="99.0819%" y="117" width="0.0340%" height="15" fill="rgb(222,148,37)" fg:x="5828" fg:w="2"/><text x="99.3319%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.03%)</title><rect x="99.0819%" y="101" width="0.0340%" height="15" fill="rgb(234,67,33)" fg:x="5828" fg:w="2"/><text x="99.3319%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.03%)</title><rect x="99.0819%" y="85" width="0.0340%" height="15" fill="rgb(247,98,35)" fg:x="5828" fg:w="2"/><text x="99.3319%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.03%)</title><rect x="99.0819%" y="69" width="0.0340%" height="15" fill="rgb(247,138,52)" fg:x="5828" fg:w="2"/><text x="99.3319%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (2 samples, 0.03%)</title><rect x="99.0819%" y="53" width="0.0340%" height="15" fill="rgb(213,79,30)" fg:x="5828" fg:w="2"/><text x="99.3319%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (2 samples, 0.03%)</title><rect x="99.0819%" y="37" width="0.0340%" height="15" fill="rgb(246,177,23)" fg:x="5828" fg:w="2"/><text x="99.3319%" y="47.50"></text></g><g><title>rust_rank`rust_rank::matrices::load_csr_matrix_from_sms (557 samples, 9.47%)</title><rect x="89.7144%" y="149" width="9.4696%" height="15" fill="rgb(230,62,27)" fg:x="5277" fg:w="557"/><text x="89.9644%" y="159.50">rust_rank`rust..</text></g><g><title>rust_rank`std::io::append_to_string (4 samples, 0.07%)</title><rect x="99.1159%" y="133" width="0.0680%" height="15" fill="rgb(216,154,8)" fg:x="5830" fg:w="4"/><text x="99.3659%" y="143.50"></text></g><g><title>rust_rank`core::fmt::write (1 samples, 0.02%)</title><rect x="99.1840%" y="133" width="0.0170%" height="15" fill="rgb(244,35,45)" fg:x="5834" fg:w="1"/><text x="99.4340%" y="143.50"></text></g><g><title>rust_rank`std::fs::OpenOptions::_open (1 samples, 0.02%)</title><rect x="99.2010%" y="133" width="0.0170%" height="15" fill="rgb(251,115,12)" fg:x="5835" fg:w="1"/><text x="99.4510%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.02%)</title><rect x="99.2010%" y="117" width="0.0170%" height="15" fill="rgb(240,54,50)" fg:x="5835" fg:w="1"/><text x="99.4510%" y="127.50"></text></g><g><title>rust_rank`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="99.2350%" y="117" width="0.0170%" height="15" fill="rgb(233,84,52)" fg:x="5837" fg:w="1"/><text x="99.4850%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.03%)</title><rect x="99.3030%" y="101" width="0.0340%" height="15" fill="rgb(207,117,47)" fg:x="5841" fg:w="2"/><text x="99.5530%" y="111.50"></text></g><g><title>rust_rank`DYLD-STUB$$memcpy (2 samples, 0.03%)</title><rect x="99.3370%" y="101" width="0.0340%" height="15" fill="rgb(249,43,39)" fg:x="5843" fg:w="2"/><text x="99.5870%" y="111.50"></text></g><g><title>rust_rank`core::fmt::Formatter::pad_integral (3 samples, 0.05%)</title><rect x="99.3710%" y="101" width="0.0510%" height="15" fill="rgb(209,38,44)" fg:x="5845" fg:w="3"/><text x="99.6210%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.03%)</title><rect x="99.5750%" y="85" width="0.0340%" height="15" fill="rgb(236,212,23)" fg:x="5857" fg:w="2"/><text x="99.8250%" y="95.50"></text></g><g><title>rust_rank`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (10 samples, 0.17%)</title><rect x="99.6090%" y="85" width="0.1700%" height="15" fill="rgb(242,79,21)" fg:x="5859" fg:w="10"/><text x="99.8590%" y="95.50"></text></g><g><title>rust_rank`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (8 samples, 0.14%)</title><rect x="99.6430%" y="69" width="0.1360%" height="15" fill="rgb(211,96,35)" fg:x="5861" fg:w="8"/><text x="99.8930%" y="79.50"></text></g><g><title>rust_rank`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (8 samples, 0.14%)</title><rect x="99.6430%" y="53" width="0.1360%" height="15" fill="rgb(253,215,40)" fg:x="5861" fg:w="8"/><text x="99.8930%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (8 samples, 0.14%)</title><rect x="99.6430%" y="37" width="0.1360%" height="15" fill="rgb(211,81,21)" fg:x="5861" fg:w="8"/><text x="99.8930%" y="47.50"></text></g><g><title>rust_rank`core::fmt::Formatter::pad_integral (2 samples, 0.03%)</title><rect x="99.7790%" y="85" width="0.0340%" height="15" fill="rgb(208,190,38)" fg:x="5869" fg:w="2"/><text x="100.0290%" y="95.50"></text></g><g><title>rust_rank`rust_rank::wdm_files::save_wdm_file2 (39 samples, 0.66%)</title><rect x="99.1840%" y="149" width="0.6630%" height="15" fill="rgb(235,213,38)" fg:x="5834" fg:w="39"/><text x="99.4340%" y="159.50"></text></g><g><title>rust_rank`std::io::Write::write_fmt (37 samples, 0.63%)</title><rect x="99.2180%" y="133" width="0.6290%" height="15" fill="rgb(237,122,38)" fg:x="5836" fg:w="37"/><text x="99.4680%" y="143.50"></text></g><g><title>rust_rank`core::fmt::write (35 samples, 0.60%)</title><rect x="99.2520%" y="117" width="0.5950%" height="15" fill="rgb(244,218,35)" fg:x="5838" fg:w="35"/><text x="99.5020%" y="127.50"></text></g><g><title>rust_rank`core::fmt::num::imp::_&lt;impl u64&gt;::_fmt (25 samples, 0.43%)</title><rect x="99.4220%" y="101" width="0.4250%" height="15" fill="rgb(240,68,47)" fg:x="5848" fg:w="25"/><text x="99.6720%" y="111.50"></text></g><g><title>rust_rank`core::fmt::Formatter::pad_integral::write_prefix (2 samples, 0.03%)</title><rect x="99.8130%" y="85" width="0.0340%" height="15" fill="rgb(210,16,53)" fg:x="5871" fg:w="2"/><text x="100.0630%" y="95.50"></text></g><g><title>dyld`start (5,877 samples, 99.91%)</title><rect x="0.0000%" y="245" width="99.9150%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="5877"/><text x="0.2500%" y="255.50">dyld`start</text></g><g><title>rust_rank`main (5,876 samples, 99.90%)</title><rect x="0.0170%" y="229" width="99.8980%" height="15" fill="rgb(224,169,11)" fg:x="1" fg:w="5876"/><text x="0.2670%" y="239.50">rust_rank`main</text></g><g><title>rust_rank`std::rt::lang_start_internal (5,876 samples, 99.90%)</title><rect x="0.0170%" y="213" width="99.8980%" height="15" fill="rgb(250,166,2)" fg:x="1" fg:w="5876"/><text x="0.2670%" y="223.50">rust_rank`std::rt::lang_start_internal</text></g><g><title>rust_rank`std::rt::lang_start::_{{closure}} (5,876 samples, 99.90%)</title><rect x="0.0170%" y="197" width="99.8980%" height="15" fill="rgb(242,216,29)" fg:x="1" fg:w="5876"/><text x="0.2670%" y="207.50">rust_rank`std::rt::lang_start::_{{closure}}</text></g><g><title>rust_rank`std::sys::backtrace::__rust_begin_short_backtrace (5,876 samples, 99.90%)</title><rect x="0.0170%" y="181" width="99.8980%" height="15" fill="rgb(230,116,27)" fg:x="1" fg:w="5876"/><text x="0.2670%" y="191.50">rust_rank`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_rank`rust_rank::main (5,876 samples, 99.90%)</title><rect x="0.0170%" y="165" width="99.8980%" height="15" fill="rgb(228,99,48)" fg:x="1" fg:w="5876"/><text x="0.2670%" y="175.50">rust_rank`rust_rank::main</text></g><g><title>rust_rank`std::io::Write::write_fmt (4 samples, 0.07%)</title><rect x="99.8470%" y="149" width="0.0680%" height="15" fill="rgb(253,11,6)" fg:x="5873" fg:w="4"/><text x="100.0970%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__exit (4 samples, 0.07%)</title><rect x="99.9150%" y="245" width="0.0680%" height="15" fill="rgb(247,143,39)" fg:x="5877" fg:w="4"/><text x="100.1650%" y="255.50"></text></g><g><title>all (5,882 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(236,97,10)" fg:x="0" fg:w="5882"/><text x="0.2500%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (1 samples, 0.02%)</title><rect x="99.9830%" y="245" width="0.0170%" height="15" fill="rgb(233,208,19)" fg:x="5881" fg:w="1"/><text x="100.2330%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (1 samples, 0.02%)</title><rect x="99.9830%" y="229" width="0.0170%" height="15" fill="rgb(216,164,2)" fg:x="5881" fg:w="1"/><text x="100.2330%" y="239.50"></text></g><g><title>rust_rank`std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 0.02%)</title><rect x="99.9830%" y="213" width="0.0170%" height="15" fill="rgb(220,129,5)" fg:x="5881" fg:w="1"/><text x="100.2330%" y="223.50"></text></g><g><title>rust_rank`core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.02%)</title><rect x="99.9830%" y="197" width="0.0170%" height="15" fill="rgb(242,17,10)" fg:x="5881" fg:w="1"/><text x="100.2330%" y="207.50"></text></g><g><title>rust_rank`std::sys::backtrace::__rust_begin_short_backtrace (1 samples, 0.02%)</title><rect x="99.9830%" y="181" width="0.0170%" height="15" fill="rgb(242,107,0)" fg:x="5881" fg:w="1"/><text x="100.2330%" y="191.50"></text></g><g><title>rust_rank`std::thread::spawnhook::ChildSpawnHooks::run (1 samples, 0.02%)</title><rect x="99.9830%" y="165" width="0.0170%" height="15" fill="rgb(251,28,31)" fg:x="5881" fg:w="1"/><text x="100.2330%" y="175.50"></text></g><g><title>rust_rank`std::sys::thread_local::destructors::list::register (1 samples, 0.02%)</title><rect x="99.9830%" y="149" width="0.0170%" height="15" fill="rgb(233,223,10)" fg:x="5881" fg:w="1"/><text x="100.2330%" y="159.50"></text></g><g><title>rust_rank`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.02%)</title><rect x="99.9830%" y="133" width="0.0170%" height="15" fill="rgb(215,21,27)" fg:x="5881" fg:w="1"/><text x="100.2330%" y="143.50"></text></g><g><title>rust_rank`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.9830%" y="117" width="0.0170%" height="15" fill="rgb(232,23,21)" fg:x="5881" fg:w="1"/><text x="100.2330%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="99.9830%" y="101" width="0.0170%" height="15" fill="rgb(244,5,23)" fg:x="5881" fg:w="1"/><text x="100.2330%" y="111.50"></text></g></svg></svg>